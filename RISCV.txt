multiply                                              mul ${1:rd}, ${2:rs}, ${3:rt}                         rd=((rs * rt)&lt;&lt;32)&gt;&gt;32;
multiply_hi                                           mulh ${1:rd}, ${2:rs}, ${3:rt}                        rd=(rs * rt)&gt;&gt;32;
multiply_hi_sign_unsigned                             mulhsu ${1:rd}, ${2:rs}, ${3:rt}                      rd=(rs * rt)&gt;&gt;32;
multiply_hi_unsigned                                  mulhu ${1:rd}, ${2:rs}, ${3:rt}                       rd=(rs * rt)&gt;&gt;32;
divide                                                div ${1:rd}, ${2:rs}, ${3:rt}                         rd = rs / rt
divide_unsigned                                       divu ${1:rd}, ${2:rs}, ${3:rt}                        rd = rs / rt
divides_and_returns_remainder                         rem ${1:rd},${2:rs},${3:rt}                           rd = rs % rt
divides_and_returns_remainder_unsigned                remu ${1:rd},${2:rs},${3:rt}                          rd = rs % rt
shift_right_arithmetic_immediate                      sra ${1:rd}, ${2:rt}, ${3:shamt}                      shifts shamt number of bits
shift_right_arithmetic                                srav ${1:rd}, ${2:rt}, ${3:rs}                        shifts rs number of bits
add_                                                  add ${1:rd}, ${2:rs}, ${3:rt}                         rd = rs + rt
subtract_                                             sub ${1:rd}, ${2:rs}, ${3:rt}                         rd = rs - rt
and_                                                  and ${1:rd}, ${2:rs}, ${3:rt}                         rd = rs & rt
or_                                                   or ${1:rd}, ${2:rs}, ${3:rt}                          rd = rs | rt
nor_                                                  nor ${1:rd}, ${2:rs}, ${3:rt}                         rd = ~ (rs | rt)
jump_                                                 j ${1:Label}                                          PC = PC+4[31:28] . C*4
add_unsigned                                          addu ${1:rd}, ${2:rs}, ${3:rt}                        rd = rs + rt
subtract_unsigned                                     subu ${1:rd}, ${2:rs}, ${3:rt}                        rd = rs - rt
add_immediate                                         addi ${1:rt}, ${2:rs}, ${3:Label}                     rt = rs + C (signed)
add_immediate_unsigned                                addiu ${1:rt}, ${2:rs}, ${3:Label}                    rt = rs + C (unsigned)
load_word                                             lw ${1:rt}, ${2:N}(${3:rs})                           rt = Memory[rs + C]
load_halfword                                         lh ${1:rt}, ${2:N}(${3:rs})                           rt = Memory[rs + C] (signed)
load_halfword_unsigned                                lhu ${1:rt}, ${2:N}(${3:rs})                          rt = Memory[rs + C] (unsigned)
load_byte                                             lb ${1:rt}, ${2:N}(${3:rs})                           rt = Memory[rs + C] (signed)
load_byte_unsigned                                    lbu ${1:rt}, ${2:N}(${3:rs})                          rt = Memory[rs + C] (unsigned)
store_word                                            sw ${1:rt}, ${2:N}(${3:rs})                           Memory[rs + C] = rt
store_half                                            sh ${1:rt}, ${2:N}(${3:rs})                           Memory[rs + C] = rt
store_byte                                            sb ${1:rt}, ${2:N}(${3:rs})                           Memory[rs + C] = rt
load_upper_immediate                                  lui ${1:rt}, ${2:Label}                               rt = C &lt;&lt; 16
and_immediate                                         andi ${1:rt}, ${2:rs}, ${3:Label}                     rt = rs & C
or_immediate                                          ori ${1:rt}, ${2:rs}, ${3:Label}                      rt = rs | C
exclusive_or                                          xor ${1:rd}, ${2:rs}, ${3:rt}                         rd = rs ^ rt
set_on_less_than                                      slt ${1:rd}, ${2:rs}, ${3:rt}                         rd = (rs &lt; rt)
set_on_less_than_unsigned                             sltu ${1:rd}, ${2:rs}, ${3:rt}                        rd = (rs &lt; rt)
set_on_less_than_immediate                            slti ${1:rt}, ${2:rs}, ${3:Label}                     rt = (rs &lt; C)
shift_left_logical_immediate                          slli ${1:rd}, ${2:rt}, ${3:shamt}                      rd = rt &lt;&lt; shamt
shift_right_logical_immediate                         srli ${1:rd}, ${2:rt}, ${3:shamt}                      rd = rt &gt;&gt; shamt
shift_left_logical                                    sllv ${1:rd}, ${2:rt}, ${3:rs}                        rd = rt &lt;&lt; rs
shift_right_logical                                   srlv ${1:rd}, ${2:rt}, ${3:rs}                        rd = rt &gt;&gt; rs
branch_on_equal                                       beq ${1:rs}, ${2:rt}, ${3:Label}                      if (rs == rt) go to PC+4+4*C
branch_on_not_equal                                   bne ${1:rs}, ${2:rt}, ${3:Label}                      if (rs != rt) go to PC+4+4*C
jump_register                                         jr ${1:rs}                                            goto address rs
jump_and_link                                         jal ${1:Label}                                        ra = PC + 4; PC = PC+4[31:28] . C*4
jump_and_link_register                                jalr ${2:rd}, ${2:Label}                              rd = PC + 4; PC = PC+4[31:28] . C*4
move_                                                 mv ${1:rt},${2:rs}                                    add rt, rs,zero
clear_                                                clear ${1:rt}                                         add rt, zero, zero
not_                                                  not ${1:rt},${2:rs}                                   nor rt, rs, zero
load_address                                          la ${1:rd},${2:LabelAddr}                             lui $rd,LabelAddr[31:16]; ori $rd,$rd,LabelAddr[15:0]
load_immediate                                        li ${1:rd},${2:IMMED}                                 lui $rd,IMMED[31:16]; ori $rd,$rd,IMMED[15:0]
branch_unconditionally                                b ${1:Label}                                          beq $zero,$zero,Label
branch_and_link                                       bal ${1:Label}                                        bgezal $zero,Label
branch_if_greater_than                                bgt ${1:rs},${2:rt},${3:Label}                        slt $at,$rt,$rs; bne $at,$zero,Label
branch_if_less_than                                   blt ${1:rs},${2:rt},${3:Label}                        slt $at,$rs,$rt; bne $at,$zero,Label
branch_if_greater_than_or_equal                       bge ${1:rs},${2:rt},${3:Label}                        slt $at,$rs,$rt; beq $at,$zero,Label
branch_if_less_than_or_equal                          ble ${1:rs},${2:rt},${3:Label}                        slt $at,$rt,$rs; beq $at,$zero,Label
branch_if_greater_than_unsigned                       bgtu ${1:rs},${2:rt},${3:Label}                       sltu $at,$rt,$rs; bne $at,$zero,Label
branch_if_greater_than_zero                           bgtz ${1:rs},${2:Label}                               slt $at,$zero,$rs; bne $at,$zero,Label
branch_if_equal_to_zero                               beqz ${1:rs},${2:Label}                               beq $rs,$zero,Label
